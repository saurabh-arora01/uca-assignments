/* Implement a stack that supports getMin() in O(1);
 *
 *@Saurabh 1910990417
 *DOS: 24-08-2021
 *Assignment: Assignment 4 - Stacks and Queues
 */


typedef struct {
    int top, topMin;
    int stack[1000000], minStack[1000000];
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() {
    
    MinStack* stack = (MinStack*)malloc(sizeof(MinStack));
    
    stack -> top = -1;
    stack -> topMin = -1;
    
    return stack;
}

void minStackPush(MinStack* obj, int x) {
    
    int min = obj -> minStack[obj -> topMin];
    
    if(x <= min || obj -> top == -1)
    {
        obj -> topMin = obj -> topMin + 1;
        obj -> minStack[obj -> topMin] = x;
    }
    
    obj -> top = obj -> top + 1;
    obj -> stack[obj -> top] = x;
}

void minStackPop(MinStack* obj) {
    
    if(obj -> stack[obj -> top] == obj -> minStack[obj -> topMin])
    {
        obj -> topMin = obj -> topMin - 1; 
    }
    obj -> top = obj -> top - 1;
}

int minStackTop(MinStack* obj) {
    return obj -> stack[obj -> top]; 
}

int minStackGetMin(MinStack* obj) {
    return obj -> minStack[obj -> topMin];
}

void minStackFree(MinStack* obj) {
    free(obj);
}


/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, val);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/
