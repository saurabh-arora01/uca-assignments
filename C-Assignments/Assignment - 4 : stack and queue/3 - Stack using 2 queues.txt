/* Implement Stack using 2 Queues
 *
 *@Saurabh 1910990417
 *DOS: 24-08-2021
 *Assignment: Assignment 4 - Stacks and Queues
 */


typedef struct {
    int *q1, *q2;
    int front;
    int back1, back2;
} MyStack;

/** Initialize your data structure here. */

MyStack* myStackCreate() {
    
    MyStack *stack = (MyStack*) malloc(sizeof(MyStack));
    
    stack -> q1 = (int*) malloc(101 * sizeof(int));
    stack -> q2 = (int*) malloc(101 * sizeof(int));
        
    stack -> front = 0;
    stack -> back1 = -1;
    stack -> back2 = -1;
    
    return stack;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) {
    obj -> back1 += 1;
    obj -> q1[obj -> back1] = x;
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) {
    
    if(obj -> back1 == -1) {
        return -1;
    }
    
    while(obj -> front != obj -> back1){
        obj -> back2 += 1;
        obj -> q2[obj -> back2] = obj -> q1[obj -> front];
        obj -> front += 1;
    }
    
    int value = obj -> q1[obj -> front];
    obj -> front += 1;
    
    while(obj -> back2 != -1){
        obj -> front -= 1;
        obj -> q1[obj -> front] = obj -> q2[obj -> back2];
        obj -> back2 -= 1;
    }
    return value;
}

/** Get the top element. */
int myStackTop(MyStack* obj) {
  return obj -> q1[obj -> back1];
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj) {
  if(obj -> back1 == obj -> front - 1)
      return true;
  else 
      return false;
}

void myStackFree(MyStack* obj) {
    free(obj -> q1);
    free(obj -> q2);
    free(obj);
}
