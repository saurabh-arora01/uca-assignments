/* Lasgest area rectangle in a histogram
 *
 *@Saurabh 1910990417
 *DOS: 24-08-2021
 *Assignment: Assignment 4 - Stacks and Queues
 */



//Stack implementation is taken from gfg

//Stack Implementation
struct Stack {
    int top;
    unsigned capacity;
    int* array;
};

struct Stack* createStack(unsigned capacity)
{
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int*)malloc(stack->capacity * sizeof(int));
    return stack;
}
 
int isFull(struct Stack* stack)
{
    return stack->top == stack->capacity - 1;
}
 
int isEmpty(struct Stack* stack)
{
    return stack->top == -1;
}
 
void push(struct Stack* stack, int item)
{
    if (isFull(stack))
        return;
    stack->array[++stack->top] = item;
}
 
int pop(struct Stack* stack)
{
    if (isEmpty(stack))
        return INT_MIN;
    return stack->array[stack->top--];
}
 
int peek(struct Stack* stack)
{
    if (isEmpty(stack))
        return INT_MIN;
    return stack->array[stack->top];
}



int largestRectangleArea(int* heights, int heightsSize){
   
    struct Stack* stack = createStack(100001);
        
    int leftSmaller[heightsSize], rightSmaller[heightsSize];
    
    for(int i = 0 ; i < heightsSize ; i++) {
            
        while(!isEmpty(stack) && heights[i] < heights[peek(stack)]) {
            rightSmaller[pop(stack)] = i;
        }
        
        push(stack, i);
    }
        
    
    while(!isEmpty(stack)) {
        rightSmaller[pop(stack)] = heightsSize;
    }
        
        
    for(int i = heightsSize - 1 ; i >= 0 ; i--) {
            
        while(!isEmpty(stack) && heights[i] < heights[peek(stack)]) {
            leftSmaller[pop(stack)] = i;
        }
            
        push(stack, i);
    }
        
    while(!isEmpty(stack)) {
        leftSmaller[pop(stack)] = -1;
    }
        
    int maxArea = 0;
        
    for(int i = 0 ; i < heightsSize ; i++) {
            
        int currentArea = (rightSmaller[i] - leftSmaller[i] - 1) * heights[i];
            
        if(currentArea > maxArea) {
            maxArea = currentArea;
        }
            
    }
    
    free(stack);
    
    return maxArea;
}
