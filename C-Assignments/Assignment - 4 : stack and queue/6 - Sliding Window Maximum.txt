/* Maximum in every window of size k
 *
 *@Saurabh 1910990417
 *DOS: 24-08-2021
 *Assignment: Assignment 4 - Stacks and Queues
 */



//Deque implementation is taken from dailyfreecode.com

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

typedef struct {
        int arr[100000];
        int capacity;
        int head;
        int tail;
        int size;
} deque_t;

inline int peak_back(deque_t *d) __attribute__((always_inline));
inline int peak_front(deque_t *d) __attribute__((always_inline));
inline void push_front(deque_t * d, int value) __attribute__((always_inline));
inline void push_back(deque_t * d, int value) __attribute__((always_inline));
inline int pop_back(deque_t * d) __attribute__((always_inline));
inline int pop_front(deque_t *d) __attribute__((always_inline));

int peak_back(deque_t *d)
{
        assert(d->size > 0);
        return d->arr[d->tail];
}

int peak_front(deque_t *d)
{
        assert(d->size > 0);
        return d->arr[(d->head + 1) % d->capacity];
}

deque_t* init_deque()
{
        
        deque_t *d = malloc(sizeof(deque_t));
        d->capacity = 100000;
        d->size = d->head = d->tail = 0;
    
        return d;
}

void push_back(deque_t * d, int value)
{
        assert(d->size < d->capacity);
        d->size += 1;
        d->tail += 1;
        d->tail %= d->capacity;
        d->arr[d->tail] = value;
}

void push_front(deque_t * d, int value)
{
        assert(d->size < d->capacity);
        d->size += 1;
        d->arr[d->head] = value;
        d->head -= 1;
        if (d->head == -1)
                d->head = d->capacity - 1;
}

int pop_back(deque_t * d)
{
        assert(d->size > 0);
        int rv = d->arr[d->tail];
        d->size -= 1;
        d->tail -= 1;
        if (d->tail == -1)
                d->tail = d->capacity -1;
        return rv;
}

int pop_front(deque_t * d)
{
        assert(d->size > 0);
        d->size -= 1;
        d->head += 1;
        d->head %= d->capacity;
        return d->arr[d->head];
}




int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize){

    deque_t *dq = init_deque();
    
    int* output = (int*) malloc(sizeof(int) * (numsSize - k + 1));
    
    for(int i = 0 ; i < k - 1 ; i++) {
        
        while(dq -> size > 0 && nums[peak_back(dq)] < nums[i]) {
            pop_back(dq);
        }
        push_back(dq, i);
    }
    
    for(int i = k - 1 ; i < numsSize ; i++) {
            
        while(dq -> size > 0 && nums[peak_back(dq)] < nums[i]) {
            pop_back(dq);
        }
            
        while(dq -> size > 0 && peak_front(dq) < i - k + 1) {
            pop_front(dq);
        }
            
        push_back(dq, i);
            
        output[i - k + 1] = nums[peak_front(dq)];
    }
    
    *returnSize = numsSize - k + 1;
    return output;
}
